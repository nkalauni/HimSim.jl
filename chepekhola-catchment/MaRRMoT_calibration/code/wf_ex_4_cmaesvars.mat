# Created by Octave 6.4.0, Tue Aug 15 11:38:29 2023 +0545 <nabin@nabin>
# name: B
# type: matrix
# rows: 4
# columns: 4
 -0.039800565885009978 0.84418572852111495 0.40117862764848139 -0.3533016833169475
 -0.74183989721052268 -0.056642355664220573 0.46670379468762013 0.47817651393148219
 0.65609337173288018 -0.1180360038993203 0.64400303862129349 0.37532529304351558
 -0.1327816607446049 -0.51981689188555813 0.45442641097189446 -0.71109497712439595


# name: BD
# type: matrix
# rows: 4
# columns: 4
 -0.0097885319046962169 0.34937054055502076 0.22987694655563126 -0.21220796524990626
 -0.1824477451652681 -0.023441725852658159 0.26742312744217411 0.28721308118043076
 0.16135928620265652 -0.048849798206732666 0.36901629819753834 0.22543627869482233
 -0.032656257358557615 -0.21512885419875441 0.26038813782469183 -0.42711378213169754


# name: C
# type: matrix
# rows: 4
# columns: 4
 0.22003122103780254 -0.0058784444338865292 0.018342814936969806 0.075654149415447527
 -0.0058784444338865292 0.18784317731895192 0.13513722640327808 -0.042037803071019897
 0.018342814936969806 0.13513722640327808 0.21541766611585372 0.0050401358302049381
 0.075654149415447527 -0.042037803071019897 0.0050401358302049381 0.29757502026019128


# name: N
# type: scalar
4


# name: ans
# type: scalar
0


# name: arpos
# type: matrix
# rows: 4
# columns: 4
 -0.040444671835100393 0.56324720834743125 0.48268953216055899 -0.1890239874577441
 0.34157512722121125 -0.39359175112843414 0.24091471954025484 -0.047549809247622456
 0.0058395113800723958 -0.068784067576521418 -0.21534046944933222 -0.4628944670685014
 0.12576308941773803 -0.071282343871066176 -0.48654569242092921 0.051074526677915587


# name: arrEqualFunvals
# type: range
# base, length, increment
0 14 0


# name: arx
# type: matrix
# rows: 4
# columns: 9
 2.6566233997383399 2.8930834538784183 2.7836747984216061 2.5269011401330492 2.8442194601352195 2.5352135015320818 2.4367771557704425 2.7894489861657252 2.6566234157650741
 10.30101122825617 9.9492972649837803 11.109137238349632 10.395228570903676 10.334170832349995 10.580662767728038 10.159196458745576 10.399161166739766 10.301011260823477
 4.3845802468820434 3.9381191895337393 4.5614549397797983 3.9833837287785334 3.849222247080653 4.6894231527571373 3.6990630373896196 4.158658190385597 4.3845802713706465
 -0.76406703488270122 -0.27648978802211793 -0.29341707769089348 -0.15696763600503844 -0.52837671706224543 -0.2043759683059273 -0.2022715925633326 0.60082220313296064 -0.76406705278659681


# name: arxvalid
# type: matrix
# rows: 4
# columns: 9
 2.6566233997383399 2.8930834538784183 2.7836747984216061 2.5269011401330492 2.8442194601352195 2.5352135015320818 2.4367771557704425 2.7894489861657252 2.6566234157650741
 10 9.9492972649837803 10 10 10 10 10 10 10
 4.3845802468820434 3.9381191895337393 4.5614549397797983 3.9833837287785334 3.849222247080653 4.6894231527571373 3.6990630373896196 4.158658190385597 4.3845802713706465
 0 0 0 0 0 0 0 0.60082220313296064 0


# name: arz
# type: matrix
# rows: 4
# columns: 9
 1.49242812298706 0.92064876564660436 -2.2863766940823327 -1.0895406920623987 -1.2233282374035104 1.0121988471338439 -1.0242161533896827 -1.03057610076199 -0.56080614364418147
 1.3010634355587947 1.2842579331669111 0.51676105374562309 -0.28677273424983535 1.5771305028156362 -0.40098879186631686 -0.35772909514014267 -1.0284270502389272 0.75460202734076587
 0.58902683379700072 -0.19140090753379732 2.6348179170556327 0.35640676235666563 -0.065236329335608439 1.9922083017511123 -0.66489505228826062 1.5853397208971989 0.9350801019563646
 1.3372952255680544 -0.5576586872240018 1.1188736591889799 0.071808359073371436 0.31677319917188157 0.80618449600905906 -0.14660300850416746 -1.6503184857013384 0.65338551775827736


# name: bestever
# type: scalar struct
# ndims: 2
 1 1
# length: 3
# name: x
# type: matrix
# rows: 4
# columns: 1
 529.09993429319741
 20
 118.42153335845452
 0.5


# name: f
# type: scalar
-0.55014180137282109


# name: evals
# type: scalar
289




# name: bnd
# type: scalar struct
# ndims: 2
 1 1
# length: 11
# name: isactive
# type: bool
1


# name: weights
# type: matrix
# rows: 4
# columns: 1
 0.0095753406793552039
 0.011631905897587332
 0.0080035989364205876
 0.011216296711263325


# name: flgscale
# type: scalar
0


# name: scale
# type: matrix
# rows: 4
# columns: 1
 1
 1
 1
 1


# name: isbounded
# type: matrix
# rows: 4
# columns: 1
 1
 1
 1
 1


# name: dfithist
# type: matrix
# rows: 1
# columns: 22
 0.023089899536501042 0.31421485968451146 0.028298054347181915 0.060104246450727927 0.028547540752633566 0.024838982319442128 0.037610622046538984 0.039343809496654246 0.013191162091229948 0.012569766618825284 0.037335378709803267 0.021229903611872183 0.0055629156137570086 0.042343393201657246 0.044023193832067022 0.020695716075208065 0.029875057282366561 0.026502244097390926 0.013227202265094806 0.030112332238953047 0.012292177240210089 0.061605293056908213


# name: aridxpoints
# type: matrix
# rows: 0
# columns: 0


# name: arfitness
# type: matrix
# rows: 0
# columns: 0


# name: validfitval
# type: scalar
1


# name: iniphase
# type: scalar
0


# name: arpenalty
# type: matrix
# rows: 1
# columns: 9
 0.0076019973855266168 0.0008574477804759817 0.015275052121167459 0.0020933256364923073 0.0044303242656682489 0.0043904204995210139 0.0007536946407580979 0.0018533073446652011 0.0076019979204575532




# name: cc
# type: scalar
0.5


# name: ccov1
# type: scalar
0.065167427382282678


# name: ccovmu
# type: scalar
0.051023999832594459


# name: chiN
# type: scalar
1.8809523809523809


# name: cmaVersion
# type: sq_string
# elements: 1
# length: 9
3.61.beta


# name: cmean
# type: scalar
1


# name: counteval
# type: scalar
308


# name: countevalNaN
# type: scalar
0


# name: countiter
# type: scalar
34


# name: cs
# type: scalar
0.47917636842350902


# name: damps
# type: scalar
1.4791763684235091


# name: dd
# type: matrix
# rows: 4
# columns: 1
 1.032717919949232
 0.85012946255351429
 1.2355224178201283
 0.88163019967712553


# name: defopts
# type: scalar struct
# ndims: 2
 1 1
# length: 43
# name: insigma
# type: sq_string
# elements: 1
# length: 100
[] % when left empty, it defaults to the standard deviation of xstart if all(size(xstart) > 1) or to


# name: StopFitness
# type: sq_string
# elements: 1
# length: 50
-Inf % stop if f(xmin) < stopfitness, minimization


# name: MaxFunEvals
# type: sq_string
# elements: 1
# length: 31
300  % maximal number of fevals


# name: MaxIter
# type: sq_string
# elements: 1
# length: 56
1e3*(N+5)^2/sqrt(popsize) % maximal number of iterations


# name: StopFunEvals
# type: sq_string
# elements: 1
# length: 57
Inf  % stop after resp. evaluation, possibly resume later


# name: StopIter
# type: sq_string
# elements: 1
# length: 56
Inf  % stop after resp. iteration, possibly resume later


# name: TolX
# type: sq_string
# elements: 1
# length: 50
1e-11*max(insigma) % stop if x-change smaller TolX


# name: TolUpX
# type: sq_string
# elements: 1
# length: 50
1e3*max(insigma) % stop if x-changes larger TolUpX


# name: TolFun
# type: sq_string
# elements: 1
# length: 42
1e-12 % stop if fun-changes smaller TolFun


# name: TolHistFun
# type: sq_string
# elements: 1
# length: 51
1e-13 % stop if back fun-changes smaller TolHistFun


# name: StopOnStagnation
# type: sq_string
# elements: 1
# length: 49
on  % stop when fitness stagnates for a long time


# name: StopOnWarnings
# type: sq_string
# elements: 1
# length: 38
yes  % 'no'=='off'==0, 'on'=='yes'==1 


# name: StopOnEqualFunctionValues
# type: sq_string
# elements: 1
# length: 31
2 + N/3  % number of iterations


# name: DiffMaxChange
# type: sq_string
# elements: 1
# length: 52
Inf  % maximal variable change(s), can be Nx1-vector


# name: DiffMinChange
# type: sq_string
# elements: 1
# length: 52
0    % minimal variable change(s), can be Nx1-vector


# name: WarnOnEqualFunctionValues
# type: sq_string
# elements: 1
# length: 38
yes  % 'no'=='off'==0, 'on'=='yes'==1 


# name: LBounds
# type: sq_string
# elements: 1
# length: 41
-Inf % lower bounds, scalar or Nx1-vector


# name: UBounds
# type: sq_string
# elements: 1
# length: 41
Inf  % upper bounds, scalar or Nx1-vector


# name: EvalParallel
# type: sq_string
# elements: 1
# length: 70
no   % Can we use parallel evaluation with a parallel pool of workers?


# name: EvalInitialX
# type: sq_string
# elements: 1
# length: 37
yes  % evaluation of initial solution


# name: Restarts
# type: sq_string
# elements: 1
# length: 26
0    % number of restarts 


# name: IncPopSize
# type: sq_string
# elements: 1
# length: 57
2    % multiplier for population size before each restart


# name: RestartIf
# type: sq_string
# elements: 1
# length: 77
true % condition for restart: true restarts as many times as in opts.Restarts


# name: PopSize
# type: sq_string
# elements: 1
# length: 48
(4 + floor(3*log(N)))  % population size, lambda


# name: ParentNumber
# type: sq_string
# elements: 1
# length: 54
floor(popsize/2)       % AKA mu, popsize equals lambda


# name: RecombinationWeights
# type: sq_string
# elements: 1
# length: 42
superlinear decrease % or linear, or equal


# name: DiagonalOnly
# type: sq_string
# elements: 1
# length: 84
0*(1+100*N/sqrt(popsize))+(N>=1000)  % C is diagonal for given iterations, 1==always


# name: Noise
# type: scalar struct
# ndims: 2
 1 1
# length: 10
# name: on
# type: sq_string
# elements: 1
# length: 43
1  % uncertainty handling is off by default


# name: reevals
# type: sq_string
# elements: 1
# length: 70
1*ceil(0.05*lambda)  % nb. of re-evaluated for uncertainty measurement


# name: theta
# type: sq_string
# elements: 1
# length: 48
0.5  % threshold to invoke uncertainty treatment


# name: cum
# type: sq_string
# elements: 1
# length: 42
0.3  % cumulation constant for uncertainty


# name: cutoff
# type: sq_string
# elements: 1
# length: 46
2*lambda/3  % rank change cutoff for summation


# name: alphasigma
# type: sq_string
# elements: 1
# length: 41
1+2/(N+10)  % factor for increasing sigma


# name: epsilon
# type: sq_string
# elements: 1
# length: 60
1e-7  % additional relative perturbation before reevaluation


# name: minmaxevals
# type: sq_string
# elements: 1
# length: 82
[1 inf]  % min and max value of 2nd arg to fitfun, start value is 5th arg to cmaes


# name: alphaevals
# type: sq_string
# elements: 1
# length: 53
1+2/(N+10)  % factor for increasing 2nd arg to fitfun


# name: callback
# type: sq_string
# elements: 1
# length: 62
[]  % callback function when uncertainty threshold is exceeded




# name: CMA
# type: scalar struct
# ndims: 2
 1 1
# length: 7
# name: cs
# type: sq_string
# elements: 1
# length: 58
(mueff+2)/(N+mueff+3)  % cumulation constant for step-size


# name: damps
# type: sq_string
# elements: 1
# length: 66
1 + 2*max(0,sqrt((mueff-1)/(N+1))-1) + cs  % damping for step-size


# name: ccum
# type: sq_string
# elements: 1
# length: 63
(4 + mueff/N) / (N+4 + 2*mueff/N)  % cumulation constant for pc


# name: ccov1
# type: sq_string
# elements: 1
# length: 58
2 / ((N+1.3)^2+mueff)  % learning rate for rank-one update


# name: ccovmu
# type: sq_string
# elements: 1
# length: 74
2 * (mueff-2+1/mueff) / ((N+2)^2+mueff) % learning rate for rank-mu update


# name: on
# type: sq_string
# elements: 1
# length: 3
yes


# name: active
# type: sq_string
# elements: 1
# length: 69
0  % active CMA 1: neg. updates with pos. def. check, 2: neg. updates




# name: Resume
# type: sq_string
# elements: 1
# length: 38
no   % resume former run from SaveFile


# name: Science
# type: sq_string
# elements: 1
# length: 67
on  % off==do some additional (minor) problem capturing, NOT IN USE


# name: ReadSignals
# type: sq_string
# elements: 1
# length: 56
on  % from file signals.par for termination, yet a stumb


# name: Seed
# type: sq_string
# elements: 1
# length: 45
sum(100*clock)  % evaluated if it is a string


# name: DispFinal
# type: sq_string
# elements: 1
# length: 54
on   % display messages like initial and final message


# name: DispModulo
# type: sq_string
# elements: 1
# length: 54
1  % [0:Inf], disp messages after every i-th iteration


# name: SaveVariables
# type: sq_string
# elements: 1
# length: 54
on   % [on|final|off][-v6] save variables to .mat file


# name: SaveFilename
# type: sq_string
# elements: 1
# length: 59
variablescmaes.mat  % save all variables, see SaveVariables


# name: LogModulo
# type: sq_string
# elements: 1
# length: 62
1    % [0:Inf] if >1 record data less frequently after gen=100


# name: LogTime
# type: sq_string
# elements: 1
# length: 57
25   % [0:100] max. percentage of time for recording data


# name: LogFilenamePrefix
# type: sq_string
# elements: 1
# length: 33
outcmaes  % files for output data


# name: LogPlot
# type: sq_string
# elements: 1
# length: 51
off    % plot while running using output data files


# name: UserData
# type: sq_string
# elements: 1
# length: 48
for saving data/comments associated with the run


# name: UserDat2
# type: sq_string
# elements: 0




# name: diagC
# type: matrix
# rows: 4
# columns: 1
 0.22003122103780254
 0.18784317731895192
 0.21541766611585372
 0.29757502026019128


# name: diagD
# type: matrix
# rows: 4
# columns: 1
 0.24593951585956861
 0.41385506619149415
 0.57300397058303121
 0.60064238374866208


# name: err
# type: sq_string
# elements: 0


# name: fid
# type: scalar
29


# name: filenameprefix
# type: sq_string
# elements: 1
# length: 8
wf_ex_4_


# name: filenames
# type: cell
# rows: 1
# columns: 5
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
axlen



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 3
fit



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
stddev



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
xmean



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 11
xrecentbest





# name: firstvarargin
# type: scalar
0


# name: fitfun
# type: function handle
@<anonymous>
@(x, varargin) original_fitfun (scale_linear (x, lbounds, ubounds, original_lbounds, original_ubounds), varargin {:})
# length: 5
# name: lbounds
# type: matrix
# rows: 4
# columns: 1
 0
 0
 0
 0


# name: original_fitfun
# type: function handle


# name: original_lbounds
# type: matrix
# rows: 4
# columns: 1
 1
 -20
 1
 0.5


# name: original_ubounds
# type: matrix
# rows: 4
# columns: 1
 2000
 20
 300
 15


# name: ubounds
# type: matrix
# rows: 4
# columns: 1
 10
 10
 10
 10




# name: fitness
# type: scalar struct
# ndims: 2
 1 1
# length: 10
# name: hist
# type: matrix
# rows: 1
# columns: 25
 -0.54997351010296724 -0.54989236155509191 -0.55014180137282109 -0.54922473346103606 -0.54847066200081462 -0.54874269226045336 -0.54695577420050911 -0.54875483697648897 -0.54873069858033041 -0.54807298871104826 -0.54904341297699222 -0.54357354071454211 -0.54604774463788375 -0.54830286318642407 -0.53161490805050593 -0.5310929396959545 -0.53823153879557473 -0.54737434499667259 -0.54654681458031962 -0.54035798330792639 -0.51134509182642418 -0.47558066776321894 -0.50747979539582522 -0.50589706752382879 -0.43259252068543175


# name: histsel
# type: matrix
# rows: 1
# columns: 25
 -0.54788018446647491 -0.54894958067202859 -0.54997570974159016 -0.54922262311909853 -0.54779124259656653 -0.54717318813030169 -0.54629070830558113 -0.54850273919818993 -0.546468249873728 -0.54796370449036935 -0.54582018777837538 -0.54357354071454211 -0.54597919242206316 -0.53792692336383396 -0.5270116839212593 -0.52843308820225143 -0.52893683040426565 -0.5331086347109868 -0.54603262939103536 -0.53119024396200187 -0.51134509182642418 -0.47558066776321894 -0.50737722508572602 -0.49126168232624784 -0.40409742080669708


# name: histbest
# type: matrix
# rows: 1
# columns: 34
 -0.54997351010296724 -0.54989236155509191 -0.55014180137282109 -0.54922473346103606 -0.54847066200081462 -0.54874269226045336 -0.54695577420050911 -0.54875483697648897 -0.54873069858033041 -0.54807298871104826 -0.54904341297699222 -0.54357354071454211 -0.54604774463788375 -0.54830286318642407 -0.53161490805050593 -0.5310929396959545 -0.53823153879557473 -0.54737434499667259 -0.54654681458031962 -0.54035798330792639 -0.51134509182642418 -0.47558066776321894 -0.50747979539582522 -0.50589706752382879 -0.43259252068543175 -0.47645626966369692 -0.45914239963183201 -0.52956851328256027 -0.46030167185482274 -0.52111401441822858 -0.42293037019428958 -0.46245789744774202 -0.018559358692967876 -0.0087495861198720881


# name: histmedian
# type: matrix
# rows: 1
# columns: 34
 -0.5410564956406847 -0.54865764582516574 -0.54809940460188655 -0.54768562961479894 -0.54694426574634403 -0.54328544877837737 -0.54259723535491566 -0.54406388365758429 -0.53773083600579819 -0.54543229694678019 -0.53350886654701257 -0.52430838305773531 -0.53408310766816969 -0.53238417206115529 -0.48684114049987465 -0.45500316483211323 -0.50219374945424211 -0.49226834124325108 -0.44132653024294211 -0.47518455319452074 -0.35979886287057489 -0.38135234243214167 -0.43032907292586953 -0.23743297203643532 -0.35208423983943316 -0.31171942663503671 -0.20333022812206902 -0.14295640630582884 -0.21409721904871448 -0.16324944688139748 0.14959779073999491 -0.018836231428757622 0.13620734003913482 0.17205790772374296


# name: raw
# type: matrix
# rows: 1
# columns: 8
 -0.54997351010296724 -0.54926191952725212 -0.54852093722151785 -0.54527586541649953 -0.53683712586486976 -0.52668451156466389 -0.52404480566618628 -0.52084629323296161


# name: sel
# type: matrix
# rows: 1
# columns: 8
 -0.54788018446647491 -0.54766348944104182 -0.54483159526158387 -0.54452217077574139 -0.52923512847934318 -0.52219149832152112 -0.51645587273344062 -0.51140945944349647


# name: rawar12
# type: matrix
# rows: 1
# columns: 9
 -0.53683712586486976 -0.54852093722151785 -0.52668451156466389 -0.54997351010296724 -0.54926191952725212 -0.52084629323296161 -0.54527586541649953 -0.52404480566618628 -0.53683712460173794


# name: selar12
# type: matrix
# rows: 1
# columns: 9
 -0.52923512847934318 -0.54766348944104182 -0.51140945944349647 -0.54788018446647491 -0.54483159526158387 -0.51645587273344062 -0.54452217077574139 -0.52219149832152112 -0.52923512668128037


# name: idx
# type: lazy_index
# name: index_value
# type: matrix
# rows: 1
# columns: 8
 4 5 2 7 1 3 8 6




# name: idxsel
# type: lazy_index
# name: index_value
# type: matrix
# rows: 1
# columns: 8
 4 2 5 7 1 8 6 3






# name: fitness_to_calc
# type: matrix
# rows: 1
# columns: 0



# name: flgActiveCMA
# type: scalar
0


# name: flgDiagonalOnly
# type: scalar
0


# name: flgEvalParallel
# type: bool
0


# name: flgWarnOnEqualFunctionValues
# type: scalar
1


# name: flg_future_setting
# type: scalar
0


# name: flgdisplay
# type: scalar
1


# name: flgplotting
# type: scalar
0


# name: flgreadsignals
# type: scalar
1


# name: flgresume
# type: scalar
0


# name: flgsaving
# type: scalar
1


# name: flgsavingfinal
# type: scalar
1


# name: flgscience
# type: scalar
1


# name: fmean
# type: scalar
NaN


# name: fmin
# type: scalar
-0.55014180137282109


# name: hsig
# type: bool
1


# name: i
# type: matrix
# rows: 0
# columns: 0


# name: infitfun
# type: function handle


# name: inopts
# type: scalar struct
# ndims: 2
 1 1
# length: 43
# name: insigma
# type: matrix
# rows: 4
# columns: 1
 599.69999999999993
 12
 89.700000000000003
 4.3499999999999996


# name: StopFitness
# type: sq_string
# elements: 1
# length: 50
-Inf % stop if f(xmin) < stopfitness, minimization


# name: MaxFunEvals
# type: sq_string
# elements: 1
# length: 31
300  % maximal number of fevals


# name: MaxIter
# type: sq_string
# elements: 1
# length: 56
1e3*(N+5)^2/sqrt(popsize) % maximal number of iterations


# name: StopFunEvals
# type: sq_string
# elements: 1
# length: 57
Inf  % stop after resp. evaluation, possibly resume later


# name: StopIter
# type: sq_string
# elements: 1
# length: 56
Inf  % stop after resp. iteration, possibly resume later


# name: TolX
# type: scalar
4.3499999999999999e-06


# name: TolUpX
# type: sq_string
# elements: 1
# length: 50
1e3*max(insigma) % stop if x-changes larger TolUpX


# name: TolFun
# type: scalar
9.9999999999999995e-07


# name: TolHistFun
# type: scalar
9.9999999999999995e-07


# name: StopOnStagnation
# type: sq_string
# elements: 1
# length: 49
on  % stop when fitness stagnates for a long time


# name: StopOnWarnings
# type: sq_string
# elements: 1
# length: 38
yes  % 'no'=='off'==0, 'on'=='yes'==1 


# name: StopOnEqualFunctionValues
# type: sq_string
# elements: 1
# length: 31
2 + N/3  % number of iterations


# name: DiffMaxChange
# type: sq_string
# elements: 1
# length: 52
Inf  % maximal variable change(s), can be Nx1-vector


# name: DiffMinChange
# type: sq_string
# elements: 1
# length: 52
0    % minimal variable change(s), can be Nx1-vector


# name: WarnOnEqualFunctionValues
# type: sq_string
# elements: 1
# length: 38
yes  % 'no'=='off'==0, 'on'=='yes'==1 


# name: LBounds
# type: matrix
# rows: 4
# columns: 1
 1
 -20
 1
 0.5


# name: UBounds
# type: matrix
# rows: 4
# columns: 1
 2000
 20
 300
 15


# name: EvalParallel
# type: bool
0


# name: EvalInitialX
# type: sq_string
# elements: 1
# length: 37
yes  % evaluation of initial solution


# name: Restarts
# type: sq_string
# elements: 1
# length: 26
0    % number of restarts 


# name: IncPopSize
# type: sq_string
# elements: 1
# length: 57
2    % multiplier for population size before each restart


# name: RestartIf
# type: sq_string
# elements: 1
# length: 77
true % condition for restart: true restarts as many times as in opts.Restarts


# name: PopSize
# type: scalar
8


# name: ParentNumber
# type: sq_string
# elements: 1
# length: 54
floor(popsize/2)       % AKA mu, popsize equals lambda


# name: RecombinationWeights
# type: sq_string
# elements: 1
# length: 42
superlinear decrease % or linear, or equal


# name: DiagonalOnly
# type: sq_string
# elements: 1
# length: 84
0*(1+100*N/sqrt(popsize))+(N>=1000)  % C is diagonal for given iterations, 1==always


# name: Noise
# type: scalar struct
# ndims: 2
 1 1
# length: 10
# name: on
# type: sq_string
# elements: 1
# length: 43
1  % uncertainty handling is off by default


# name: reevals
# type: sq_string
# elements: 1
# length: 70
1*ceil(0.05*lambda)  % nb. of re-evaluated for uncertainty measurement


# name: theta
# type: sq_string
# elements: 1
# length: 48
0.5  % threshold to invoke uncertainty treatment


# name: cum
# type: sq_string
# elements: 1
# length: 42
0.3  % cumulation constant for uncertainty


# name: cutoff
# type: sq_string
# elements: 1
# length: 46
2*lambda/3  % rank change cutoff for summation


# name: alphasigma
# type: sq_string
# elements: 1
# length: 41
1+2/(N+10)  % factor for increasing sigma


# name: epsilon
# type: sq_string
# elements: 1
# length: 60
1e-7  % additional relative perturbation before reevaluation


# name: minmaxevals
# type: sq_string
# elements: 1
# length: 82
[1 inf]  % min and max value of 2nd arg to fitfun, start value is 5th arg to cmaes


# name: alphaevals
# type: sq_string
# elements: 1
# length: 53
1+2/(N+10)  % factor for increasing 2nd arg to fitfun


# name: callback
# type: sq_string
# elements: 1
# length: 62
[]  % callback function when uncertainty threshold is exceeded




# name: CMA
# type: scalar struct
# ndims: 2
 1 1
# length: 7
# name: cs
# type: sq_string
# elements: 1
# length: 58
(mueff+2)/(N+mueff+3)  % cumulation constant for step-size


# name: damps
# type: sq_string
# elements: 1
# length: 66
1 + 2*max(0,sqrt((mueff-1)/(N+1))-1) + cs  % damping for step-size


# name: ccum
# type: sq_string
# elements: 1
# length: 63
(4 + mueff/N) / (N+4 + 2*mueff/N)  % cumulation constant for pc


# name: ccov1
# type: sq_string
# elements: 1
# length: 58
2 / ((N+1.3)^2+mueff)  % learning rate for rank-one update


# name: ccovmu
# type: sq_string
# elements: 1
# length: 74
2 * (mueff-2+1/mueff) / ((N+2)^2+mueff) % learning rate for rank-mu update


# name: on
# type: sq_string
# elements: 1
# length: 3
yes


# name: active
# type: sq_string
# elements: 1
# length: 69
0  % active CMA 1: neg. updates with pos. def. check, 2: neg. updates




# name: Resume
# type: sq_string
# elements: 1
# length: 38
no   % resume former run from SaveFile


# name: Science
# type: sq_string
# elements: 1
# length: 67
on  % off==do some additional (minor) problem capturing, NOT IN USE


# name: ReadSignals
# type: sq_string
# elements: 1
# length: 56
on  % from file signals.par for termination, yet a stumb


# name: Seed
# type: sq_string
# elements: 1
# length: 45
sum(100*clock)  % evaluated if it is a string


# name: DispFinal
# type: sq_string
# elements: 1
# length: 54
on   % display messages like initial and final message


# name: DispModulo
# type: sq_string
# elements: 1
# length: 54
1  % [0:Inf], disp messages after every i-th iteration


# name: SaveVariables
# type: sq_string
# elements: 1
# length: 54
on   % [on|final|off][-v6] save variables to .mat file


# name: SaveFilename
# type: sq_string
# elements: 1
# length: 21
wf_ex_4_cmaesvars.mat


# name: LogModulo
# type: sq_string
# elements: 1
# length: 62
1    % [0:Inf] if >1 record data less frequently after gen=100


# name: LogTime
# type: sq_string
# elements: 1
# length: 57
25   % [0:100] max. percentage of time for recording data


# name: LogFilenamePrefix
# type: sq_string
# elements: 1
# length: 8
wf_ex_4_


# name: LogPlot
# type: sq_string
# elements: 1
# length: 51
off    % plot while running using output data files


# name: UserData
# type: sq_string
# elements: 1
# length: 48
for saving data/comments associated with the run


# name: UserDat2
# type: sq_string
# elements: 0




# name: input
# type: scalar struct
# ndims: 2
 1 1
# length: 3
# name: fitfun
# type: function handle


# name: xstart
# type: matrix
# rows: 4
# columns: 1
 1000.5
 0
 150.5
 7.75


# name: sigma
# type: matrix
# rows: 4
# columns: 1
 599.69999999999993
 12
 89.700000000000003
 4.3499999999999996




# name: insigma
# type: matrix
# rows: 4
# columns: 1
 2.9999999999999996
 3
 3
 3


# name: irun
# type: scalar
1


# name: k
# type: scalar
9


# name: l
# type: scalar
11


# name: lambda
# type: scalar
8


# name: lambda0
# type: scalar
8


# name: lambda_hist
# type: matrix
# rows: 2
# columns: 1
 1
 8


# name: lambda_last
# type: scalar
8


# name: lbounds
# type: matrix
# rows: 4
# columns: 1
 0
 0
 0
 0


# name: maxdx
# type: matrix
# rows: 4
# columns: 1
 5
 5
 5
 5


# name: maxstd
# type: scalar
0.33724549026356249


# name: maxstdidx
# type: scalar
4


# name: mindx
# type: scalar
0


# name: minstd
# type: scalar
0.26794498178929732


# name: minstdidx
# type: scalar
2


# name: mu
# type: scalar
4


# name: mueff
# type: scalar
2.6001788261131793


# name: name
# type: sq_string
# elements: 1
# length: 11
xrecentbest


# name: namecell
# type: cell
# rows: 1
# columns: 1
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 11
xrecentbest





# name: neg
# type: scalar struct
# ndims: 2
 1 1
# length: 1
# name: ccov
# type: scalar
0




# name: noiseAlpha
# type: scalar
1.1428571428571428


# name: noiseAlphaEvals
# type: scalar
1.1428571428571428


# name: noiseCallback
# type: matrix
# rows: 0
# columns: 0


# name: noiseCutOff
# type: scalar
5.333333333333333


# name: noiseEpsilon
# type: scalar
9.9999999999999995e-08


# name: noiseHandling
# type: scalar
1


# name: noiseMinMaxEvals
# type: matrix
# rows: 1
# columns: 2
 1 Inf


# name: noiseN
# type: scalar
0


# name: noiseReevals
# type: scalar
1


# name: noiseS
# type: scalar
-2


# name: noiseSS
# type: scalar
-2.3634690095181461


# name: noiseTheta
# type: scalar
0.5


# name: noisecum
# type: scalar
0.29999999999999999


# name: numberofvariables
# type: scalar
4


# name: original_fitfun
# type: function handle


# name: original_insigma
# type: matrix
# rows: 4
# columns: 1
 599.69999999999993
 12
 89.700000000000003
 4.3499999999999996


# name: original_lbounds
# type: matrix
# rows: 4
# columns: 1
 1
 -20
 1
 0.5


# name: original_ubounds
# type: matrix
# rows: 4
# columns: 1
 2000
 20
 300
 15


# name: out
# type: scalar struct
# ndims: 2
 1 1
# length: 4
# name: algorithm
# type: sq_string
# elements: 1
# length: 61
Evolution Strategy with Covariance Matrix Adaptation (CMA-ES)


# name: solutions
# type: scalar struct
# ndims: 2
 1 1
# length: 5
# name: bestever
# type: scalar struct
# ndims: 2
 1 1
# length: 3
# name: x
# type: matrix
# rows: 4
# columns: 1
 529.09993429319741
 20
 118.42153335845452
 0.5


# name: f
# type: scalar
-0.55014180137282109


# name: evals
# type: scalar
289




# name: evals
# type: scalar
307


# name: mean
# type: scalar struct
# ndims: 2
 1 1
# length: 3
# name: x
# type: matrix
# rows: 4
# columns: 1
 535.35585780354859
 20.997208561412492
 118.79063819489731
 0.14321980982890159


# name: f
# type: scalar
-0.55003607175912894


# name: evals
# type: scalar
308




# name: recentbest
# type: scalar struct
# ndims: 2
 1 1
# length: 3
# name: x
# type: matrix
# rows: 4
# columns: 1
 506.12753791259655
 20
 120.10317349047814
 0.5


# name: f
# type: scalar
-0.54997351010296724


# name: evals
# type: scalar
303




# name: recentworst
# type: scalar struct
# ndims: 2
 1 1
# length: 3
# name: x
# type: matrix
# rows: 4
# columns: 1
 507.78917895626319
 20
 141.21375226743839
 0.5


# name: f
# type: scalar
-0.52084629323296161


# name: evals
# type: scalar
305






# name: evals
# type: scalar
307


# name: stopflag
# type: cell
# rows: 1
# columns: 1
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 11
maxfunevals







# name: outiter
# type: scalar
34


# name: pc
# type: matrix
# rows: 4
# columns: 1
 0.26479854062429392
 0.43787166850999659
 0.1094081095959005
 -0.22305635502636731


# name: popsize
# type: scalar
8


# name: ps
# type: matrix
# rows: 4
# columns: 1
 0.67914449267810972
 1.8507333744808787
 0.11807939096259851
 -0.25599672625345504


# name: savemodulo
# type: scalar
1


# name: savetime
# type: scalar
25


# name: sigma
# type: scalar
0.61822692420710734


# name: startseed
# type: uint32 matrix
# ndims: 2
 625 1
 2147483648
 610569855
 3709853974
 1832390546
 208537072
 3536149836
 1279243393
 1693665510
 2593244338
 1337215435
 2642398142
 409974995
 222053937
 736265227
 4062381044
 3790419739
 1722109952
 3165181943
 4221423718
 1710930122
 1008777028
 4098903327
 993234172
 3836188081
 1421289474
 2152217874
 2918073583
 3237255861
 1279590822
 1583929667
 867983358
 1535156529
 331506636
 2452760100
 432160172
 2995472583
 2562766026
 3828328952
 3543743839
 772394329
 549666727
 2292003124
 951561577
 3662667354
 3930729895
 1121252608
 2625026052
 1388578764
 4097859600
 3841838658
 2090005808
 2563133013
 1296477843
 3623375585
 3435849710
 3755776622
 2926819981
 1208907098
 3398916816
 2736003694
 3470198625
 3221511863
 2037528696
 3557673228
 1390206822
 3947717517
 3697575495
 254991891
 682791175
 2728171625
 3941930035
 3275181898
 148903078
 1698642321
 3191888584
 2181123060
 2096414366
 3452494277
 1740540147
 1308835836
 2069763045
 695427079
 2728177578
 609778733
 3727115768
 2420130209
 747206078
 2832743430
 1415601096
 1579263362
 526415792
 3385812835
 2243101834
 1690218342
 1970803432
 1632814228
 2979354405
 4096129745
 1727187945
 2001805503
 80668171
 3678875724
 4220645366
 1574171249
 3776659212
 1372993251
 934899341
 2442984710
 732105922
 648235374
 3544124801
 3325782915
 179256239
 955535055
 572546717
 4194924810
 201525307
 509656071
 735669306
 1780953940
 1463234403
 1255980478
 1880332708
 3759266034
 238864669
 3053006277
 930437134
 2239330736
 880140340
 760297685
 168591178
 1710989362
 3873872569
 695400335
 757817285
 383690291
 1230702603
 1541132849
 3055595363
 217380111
 2330965028
 3796152305
 1388652234
 4228587902
 471535416
 2578607548
 1365257639
 3216352831
 4138817103
 4040025515
 2579551458
 4148917783
 2572756470
 2920616481
 1416775295
 3228374558
 2556405649
 3250505438
 1485452281
 2017723356
 1139925938
 2866774730
 113489060
 4081962932
 2040218395
 1266790783
 2461032124
 2333128131
 1439809513
 3393069777
 3247537587
 3791931311
 1213410469
 1296916762
 2225815287
 501610940
 1156240869
 3555873964
 2173608502
 545776309
 2292317792
 2389362349
 2444272311
 3431555687
 2263194435
 2272418881
 3637437977
 910111744
 2571522428
 2760762859
 3113675004
 2577709945
 3140634166
 987872228
 3410171500
 1130165456
 3143814087
 3776473366
 2693908609
 643718474
 552674318
 4230508984
 1438096014
 1447713987
 376204404
 1430294396
 1935040795
 1808046076
 1942424103
 787882516
 3600250657
 1937016728
 799458973
 3852910437
 162952041
 715636879
 370425329
 350551018
 2461699527
 2561867265
 3442427482
 2957661539
 2632167577
 1152476118
 571915959
 1021770993
 2457990149
 3512621042
 1292923727
 15445288
 1933346801
 903916746
 503084165
 2284350246
 3111838338
 1151041886
 855197100
 1432256989
 2486326021
 2316440468
 3127768130
 3325753691
 1085722924
 2338020689
 1183012445
 3489301619
 786579214
 4098546061
 3284523665
 3988034040
 3998617052
 752888102
 4273427328
 2164011300
 1584236030
 2026891265
 3269929252
 862091371
 1569206604
 3100191317
 1499015748
 3753476084
 3877763065
 1957878236
 4219052272
 1279401552
 1014550461
 1698926990
 2120331337
 3972780424
 3361580431
 779311019
 532088098
 681629572
 91581445
 2029212409
 2107523639
 829524592
 1523404217
 1354443770
 2451749835
 3768560617
 1036081917
 4040990297
 3537429145
 3458542982
 3671778352
 1033411679
 2208047228
 1363851274
 1857679876
 706195187
 261057662
 1868428598
 754942375
 2260669141
 3953630492
 3430270530
 1124340542
 190442361
 2941877759
 3476707080
 3036245454
 316300389
 1658427982
 2651404056
 2912868078
 3031139613
 3291006103
 1339364182
 3803630090
 1757390530
 2193494650
 863756368
 1046440299
 898626319
 4137891239
 1784358164
 2226615362
 1443537014
 442549316
 3458602929
 2098420991
 3836439338
 1860994554
 1516529863
 3617855413
 2897131719
 361160700
 1302417698
 3235472322
 1256027247
 933127665
 2879512318
 1768043182
 2541148685
 2944345131
 3256531307
 3038784124
 3477409547
 1492934680
 4258325420
 1270585968
 1410962243
 3691046970
 3145805741
 1554453722
 2141636951
 2104320404
 1790952212
 1906101621
 1078724783
 1415011154
 1173247664
 2447785220
 4053040126
 1600770576
 734709116
 1931863010
 2486602459
 1048606583
 1705230574
 3684099103
 2791675581
 2234615624
 491825808
 2666016152
 3124547272
 2541049054
 2842004259
 1267434612
 3851935895
 1485192224
 52762784
 3247318131
 2136978823
 2560346419
 738553160
 37594391
 2936950291
 1358049672
 209478080
 2861042610
 1840110836
 2328495112
 2970769301
 2245954206
 1062453813
 478305423
 3715308876
 4162078491
 2370784705
 2308168021
 528696246
 2700877517
 1109206463
 2299768564
 3752777540
 655298189
 2236255730
 2638465061
 2162634038
 4125519626
 2110624713
 1223988724
 4256284043
 1967333940
 148752053
 3260569065
 2362021380
 4263357898
 4109111583
 1145508823
 4088712073
 3535198580
 4282143581
 93549099
 1833576126
 1013736103
 3611475971
 2243397135
 2667865000
 1729970999
 1877755701
 1323675254
 1891568352
 1694757728
 1025435231
 918363388
 2241651296
 4120374404
 933005679
 1642398490
 2418691740
 109127903
 219596377
 2810600763
 2332793525
 797019910
 3961984204
 3644325200
 3654156336
 196457911
 2223891281
 375792399
 275197914
 1848478897
 876900998
 2863287420
 497672019
 1314757843
 1572440052
 4284706368
 4222020451
 773865905
 1022726579
 4168632167
 873672107
 2614657708
 262905223
 2229391890
 1107446158
 3607341400
 2150744813
 1454865220
 2359172624
 24034812
 4258282540
 2910686308
 3848190802
 1916486161
 971934144
 766101129
 3136993203
 1653194664
 2982492489
 3515109288
 193098621
 2977331909
 1277102970
 3190828669
 323629591
 1760208680
 472970536
 2556436506
 1737237924
 2357091225
 619267249
 1165481878
 4206763082
 3444876351
 2687827744
 1036092750
 111350019
 1322907565
 2881797427
 1561309705
 1785674512
 3751762581
 4259230801
 3435539004
 1103167463
 2604450495
 2306905111
 2589113924
 4213409702
 772581895
 918718103
 1928769166
 267667810
 2058267734
 807184233
 3215570819
 131738856
 3468501196
 3285103515
 1526303146
 3564862207
 1344358846
 2364219859
 4174343541
 3659110024
 4143682579
 537553346
 2862182895
 64827293
 403729896
 3480590909
 2984795607
 2190312703
 1330415148
 1503006237
 539737864
 3791076766
 3487227128
 2762058441
 4151546800
 1385666207
 897578250
 2982374844
 1562751394
 3193701903
 2447031939
 3385663832
 4095373746
 1077556165
 3120957327
 2313551576
 1840416866
 946373597
 2695366917
 2286680144
 2143791021
 3681891559
 1611976975
 312927507
 3958499997
 2815875269
 2974245189
 1898870182
 2805663679
 25666967
 1867733417
 1754889114
 1572219092
 3465406699
 2574718898
 2209798791
 2291519003
 1191138155
 973307975
 1765083290
 1022327281
 1785592892
 1984377428
 2510523593
 3443774726
 3811752280
 3644719945
 3072834195
 705751638
 2874885365
 1059846699
 2989587425
 2820226429
 2955824783
 1228852347
 3311487895
 3571571022
 2998581182
 422856177
 3371456584
 1894071227
 783625347
 2968978262
 2693334780
 197932204
 196602674
 2518831914
 3081675317
 3827977054
 3932398922
 3525679330
 3823758203
 490414692
 2497112088
 3369783076
 4260454578
 789485541
 2106123243
 1089572456
 1095729157
 4239335756
 722731216
 2015790466
 1361124059
 1659562656
 1177241780
 254510660
 914847933
 597413932
 1469553197
 1303878618
 990161365
 1


# name: stopFitness
# type: scalar
-Inf


# name: stopFunEvals
# type: scalar
Inf


# name: stopIter
# type: scalar
Inf


# name: stopMaxFunEvals
# type: scalar
300


# name: stopMaxIter
# type: scalar
28637.824638055172


# name: stopOnEqualFunctionValues
# type: scalar
3.333333333333333


# name: stopOnStagnation
# type: scalar
1


# name: stopOnWarnings
# type: scalar
1


# name: stopTolFun
# type: scalar
9.9999999999999995e-07


# name: stopTolHistFun
# type: scalar
9.9999999999999995e-07


# name: stopTolUpX
# type: scalar
599699.99999999988


# name: stopTolX
# type: scalar
4.3499999999999999e-06


# name: stopflag
# type: cell
# rows: 1
# columns: 1
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 11
maxfunevals





# name: str
# type: sq_string
# elements: 1
# length: 46
 (startseed=610569855, 2023/08/15 10:25:23.71)


# name: strrun
# type: sq_string
# elements: 0


# name: strsaving
# type: matrix
# rows: 0
# columns: 0


# name: strw
# type: sq_string
# elements: 1
# length: 10
53 29 14 4


# name: ti
# type: matrix
# rows: 4
# columns: 1
 0
 1
 0
 -1


# name: time
# type: scalar struct
# ndims: 2
 1 1
# length: 10
# name: t0
# type: matrix
# rows: 1
# columns: 6
 2023 8 15 11 38 15.768336


# name: c
# type: scalar
0.050000000000000003


# name: nonoutput
# type: scalar
104.09681362394318


# name: recording
# type: scalar
0.013501253070401677


# name: saving
# type: scalar
0.032228125939703138


# name: plotting
# type: scalar
0


# name: t1
# type: matrix
# rows: 1
# columns: 6
 2023 8 15 11 38 15.76545


# name: act
# type: scalar
121.44952392578125


# name: t2
# type: matrix
# rows: 1
# columns: 6
 2023 8 15 11 38 15.766678000000001


# name: t3
# type: matrix
# rows: 1
# columns: 6
 2023 8 15 11 38 15.76694




# name: tmp
# type: matrix
# rows: 4
# columns: 1
 0.014211611761520951
 0.01653281775404206
 0.022813581101695686
 0.016097895754737558


# name: tries
# type: scalar
1


# name: tx
# type: matrix
# rows: 4
# columns: 1
 0
 0.18803881979104986
 0
 -0.23325194689030121


# name: ubounds
# type: matrix
# rows: 4
# columns: 1
 10
 10
 10
 10


# name: val
# type: scalar
0.061605293056908213


# name: varargin
# type: cell
# rows: 0
# columns: 0


# name: verbosemodulo
# type: scalar
1


# name: weights
# type: matrix
# rows: 4
# columns: 1
 0.52993018447877915
 0.2857142857142857
 0.14285714285714282
 0.041498386949792215


# name: xmean
# type: matrix
# rows: 4
# columns: 1
 2.6731158469412137
 10.249302140353123
 3.9394862272540907
 -0.24605530356627478


# name: xmin
# type: matrix
# rows: 4
# columns: 1
 529.09993429319741
 20
 118.42153335845452
 0.5


# name: xold
# type: matrix
# rows: 4
# columns: 1
 2.5514337270327956
 10.18803881979105
 3.9798416473649971
 -0.23325194689030121


# name: xstart
# type: matrix
# rows: 4
# columns: 1
 1000.5
 0
 150.5
 7.75


# name: zmean
# type: matrix
# rows: 4
# columns: 1
 -0.53160249049682806
 0.42542048721495584
 0.097273179963834083
 -0.082108110729199768


